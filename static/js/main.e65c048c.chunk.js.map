{"version":3,"sources":["images/background.jpg","data.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","screens","title","color","transition","duration","ease","stagger","animate","staggerChildren","initial","y","textShadow","firstText","Array","from","secondText","App","useState","isVisible","setIsVisible","selected","setSelected","div","className","opacity","delay","variants","map","letter","i","span","key","length","button","onClick","height","drag","dragConstraints","left","right","whileHover","scale","whileTap","width","exit","img","src","require","alt","li","style","layoutId","backgroundColor","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e65c048c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/background.d52214a0.jpg\";","export const screens = [\n  {\n    title: \"Example 1\",\n    color: \"#ff0055\",\n  },\n  {\n    title: \"Example 2\",\n    color: \"#0099ff\",\n  },\n  {\n    title: \"Example 3\",\n    color: \"#22cc88\",\n  },\n  {\n    title: \"Example 4\",\n    color: \"#ffaa00\",\n  },\n];\n","import React, { useState } from \"react\";\nimport \"./App.scss\";\nimport { motion, AnimatePresence, AnimateSharedLayout } from \"framer-motion\";\nimport { screens } from \"./data\";\n\nconst transition = { duration: 1.4, ease: [0.77, 0, 0.18, 1] };\n\nconst stagger = {\n  animate: {\n    transition: {\n      staggerChildren: 0.075,\n      // staggerDirection: 1,\n      // staggerDirection: -1,\n    },\n  },\n};\n\nconst title = {\n  initial: {\n    y: 400,\n    textShadow: \"1px 1px 10px #ccc\",\n  },\n  animate: {\n    y: 0,\n    transition: { duration: 1, ...transition },\n  },\n};\n\nconst firstText = Array.from(\"Stagger\");\nconst secondText = Array.from(\"demo\");\n\nfunction App() {\n  const [isVisible, setIsVisible] = useState(false);\n  const [selected, setSelected] = useState();\n\n  return (\n    <>\n      <motion.div initial=\"initial\" animate=\"animate\" className=\"container\">\n        <div className=\"row center top-row\">\n          <div className=\"top\">\n            {/* <motion.div\n              // initial={{ opacity: 0, y: 20 }}\n              initial\n              animate={{\n                opacity: 1,\n                y: height,\n                transition: { delay: 2, ...transition },\n              }}\n              className=\"title-example\"\n            > */}\n            <motion.div\n              initial={{\n                opacity: 0,\n                y: 20,\n              }}\n              animate={{\n                opacity: 1,\n                y: 0,\n                transition: { delay: 2, ...transition },\n              }}\n              className=\"title-example\"\n            >\n              <p>Framer Motion</p>\n              <p>Examples</p>\n            </motion.div>\n            {/* </motion.div> */}\n\n            <motion.div variants={stagger} className=\"overflow-text\">\n              {firstText.map((letter, i) => (\n                <motion.span\n                  key={i}\n                  variants={title}\n                  className={i == firstText.length - 1 && \"last\"}\n                >\n                  {letter}\n                </motion.span>\n              ))}\n\n              {secondText.map((letter, i) => (\n                <motion.span key={i} variants={title}>\n                  {letter}\n                </motion.span>\n              ))}\n            </motion.div>\n          </div>\n        </div>\n\n        <motion.button\n          initial={{ opacity: 0, y: 20 }}\n          animate={{\n            opacity: 1,\n            y: 0,\n            transition: { delay: 2.75, ...transition },\n          }}\n          className=\"animate\"\n          onClick={() => setIsVisible(!isVisible)}\n        >\n          Show Image\n        </motion.button>\n\n        <AnimatePresence>\n          {isVisible && (\n            <div className=\"row bottom-row\">\n              <div className=\"bottom\">\n                <motion.div className=\"image-container-single\">\n                  <motion.div\n                    initial={{\n                      height: 0,\n                    }}\n                    drag=\"x\"\n                    dragConstraints={{ left: -100, right: 100 }}\n                    whileHover={{ scale: 1.1 }}\n                    whileTap={{ scale: 0.9 }}\n                    animate={{\n                      width: \"100%\",\n                      height: 300,\n                      transition: { delay: 0.5, ...transition },\n                    }}\n                    exit={{\n                      opacity: 0,\n                      height: 0,\n                    }}\n                    className=\"thumbnail-single\"\n                  >\n                    <motion.div\n                      className=\"image-container\"\n                      whileHover=\"hover\"\n                      transition={transition}\n                    >\n                      <motion.img\n                        src={require(\"./images/background.jpg\")}\n                        alt=\"\"\n                        initial={{ scale: 2 }}\n                        animate={{\n                          scale: 1,\n                          y: -350,\n                          transition: { delay: 2, ...transition },\n                        }}\n                        exit={{\n                          scale: 2,\n                          transition: { ...transition },\n                        }}\n                      />\n                    </motion.div>\n                  </motion.div>\n                </motion.div>\n              </div>\n            </div>\n          )}\n        </AnimatePresence>\n      </motion.div>\n\n      <motion.div\n        initial={{ y: 20, opacity: 0 }}\n        animate={{ y: 0, opacity: 1 }}\n        transition={{ delay: 3, ...transition }}\n        className=\"shared-layout\"\n      >\n        <AnimateSharedLayout>\n          <ol>\n            {screens.map(({ title, color }, i) => (\n              <motion.li\n                animate\n                key={i}\n                className={`title ${i === selected && \"selected\"}`}\n                style={{ color: i === selected ? color : \"#333\" }}\n                onClick={() => setSelected(i)}\n              >\n                {i === selected && (\n                  <motion.div\n                    // When a new component with a layoutId gets added as another gets removed,\n                    // the component will perform a layout animation from previous component.\n                    layoutId=\"underline\"\n                    className=\"underline\"\n                    style={{ backgroundColor: color }}\n                  />\n                )}\n                {title}\n              </motion.li>\n            ))}\n          </ol>\n        </AnimateSharedLayout>\n      </motion.div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}